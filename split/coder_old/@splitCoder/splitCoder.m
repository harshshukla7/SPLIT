classdef splitCoder < handle

  properties
    dat = struct([]); % splitData structure
    
  end
  
  methods
    function cdr = splitCoder(dat)
      %
      % Create a splitCoder object
      %
      % cdr = splitCoder(dat)
      % 
      % dat : splitData
      %
      cdr.dat = dat;
      
      cdr.gen_header;
    end
    
    
  end

  methods(Hidden=true, Access=private)
    
    % Print the header
    function gen_header(cdr)
      dat = cdr.data;
      cdr.pl('/**********************************************************');
      cdr.pl(' * Problem data file');
      cdr.pl(' * ');
      cdr.pl(' * Automatically generated by SPLIT on %s', char(datetime));
      cdr.pl(' * ');
      cdr.pl(' * More information : ');
      cdr.pl(' *   la.epfl.ch/split');
      cdr.pl(' *   colin.jones@epfl.ch');
      cdr.pl(' **********************************************************/');
      cdr.pl
%       cdr.pl('#define  nParam  %i', size(dat.pL,2));
%       cdr.pl('#define  nPrimal %i', size(dat.A,2));
%       cdr.pl('#define  nDual   %i', size(dat.L,1));
%       cdr.pl('#define  nEqCon  %i', size(dat.A,1));
%       cdr.pl;
    end
    
    
  end
end
