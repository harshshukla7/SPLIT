Template type: SOC


---------------------------------------------------------
Input and output vectors:
---------------------------------------------------------

Name			| Direction		| Number of data 			| Data representation

pl_vec_in			 	| Input         | PL_VEC_IN_IN_LENGTH=5 			|data type "data_t_pl_vec_in_in" is floating-point single precision (32 bits)
pl_mat_in			 	| Input         | PL_MAT_IN_IN_LENGTH=25 			|data type "data_t_pl_mat_in_in" is floating-point single precision (32 bits)
pl_vec_out			 	| Output         | PL_VEC_OUT_OUT_LENGTH=5 			|data type "data_t_pl_vec_out_in" is floating-point single precision (32 bits)

NOTES: 1) the following constants are defined in ip_design/src/foo_data.h and are used by ip_design/src/foo.cpp, ip_design/src/foo_user.cpp and ip_design/src/foo_test.cpp
       2) ip_design/src/foo_data.h is generated automatically, please do not edit manually.

// FLOAT_FIX_VECTOR_NAME=1 to enable  fixed-point (up to 32 bits word length) arithmetic precision or 
// FLOAT_FIX_VECTOR_NAME=0 to enable floating-point single arithmetic precision.
FLOAT_FIX_PL_VEC_IN_IN=0
FLOAT_FIX_PL_MAT_IN_IN=0
FLOAT_FIX_PL_VEC_OUT_OUT=0

// Input vectors INTEGERLENGTH:
PL_VEC_IN_IN_INTEGERLENGTH=0
PL_MAT_IN_IN_INTEGERLENGTH=0
// Output vectors INTEGERLENGTH:
PL_VEC_OUT_OUT_INTEGERLENGTH=0

// Input vectors FRACTIONLENGTH:
PL_VEC_IN_IN_FRACTIONLENGTH=0
PL_MAT_IN_IN_FRACTIONLENGTH=0
// Output vectors FRACTIONLENGTH:
PL_VEC_OUT_OUT_FRACTIONLENGTH=0

//Input vectors size:
PL_VEC_IN_IN_LENGTH=5
PL_MAT_IN_IN_LENGTH=25
//Output vectors size:
PL_VEC_OUT_OUT_LENGTH=5


---------------------------------------------------------
SoC Input and output vectors:
---------------------------------------------------------

Name			| Direction		| Number of data 

state0			 	| Input         | SOC_STATE0_IN_LENGTH=5
primal0			 	| Input         | SOC_PRIMAL0_IN_LENGTH=5
dual0			 	| Input         | SOC_DUAL0_IN_LENGTH=5
tol_iterates			 	| Input         | SOC_TOL_ITERATES_IN_LENGTH=4
primal			 	| Output         | SOC_PRIMAL_OUT_LENGTH=5
dual			 	| Output         | SOC_DUAL_OUT_LENGTH=5
aux_primal			 	| Output         | SOC_AUX_PRIMAL_OUT_LENGTH=5
iterates			 	| Output         | SOC_ITERATES_OUT_LENGTH=4

NOTE: SoC interfaces use single precision floating point arithmetics.




---------------------------------------------------------
FPGA circuit clock frequency
---------------------------------------------------------
100 MHz

NOTE: This clock is also used to clock the IP axi-master and axi-slave interface. Please do not exceed 200MHz in order to guarantee time closure during the ip_prototype_build phase.


---------------------------------------------------------
FPGA name
---------------------------------------------------------
xc7z020clg484-1

NOTE: Any Xilinx 7 Series and ZynqÂ®-7000 are supported, but only a some of them are supported if the purpose is to prototype the designed IP.


---------------------------------------------------------
Evaluation Borad name
---------------------------------------------------------
zedboard

NOTE: Prototype is available only on the supported Evaluation boards which mount the following FPGAs:
- zedboard : FPGA name should be xc7z020clg484-1
- microzedboard : FPGA name should be xc7z020clg400-1
- zc702 : FPGA name should be xc7z020clg484-1
- zc706 : FPGA name should be xc7z045ffg900-2


---------------------------------------------------------
Ethernet connection type
---------------------------------------------------------
UDP-IP


---------------------------------------------------------
DDR3 memory base address
---------------------------------------------------------
33554432


---------------------------------------------------------
Number of test(s)
---------------------------------------------------------
1


---------------------------------------------------------
Type of C/RTL test(s): c, xsim, modelsim
---------------------------------------------------------
c


---------------------------------------------------------
IP design C/RTL test(s):
Input and output vectors has been mapped into a virtual memory at the following addresses:
---------------------------------------------------------

Name			| Base address in Byte

pl_vec_in			 	| 0x00000000 <- 0
pl_mat_in			 	| 0x00000014 <- (PL_VEC_IN_IN_LENGTH)*4
pl_vec_out			 	| 0x00000078 <- (PL_VEC_IN_IN_LENGTH+PL_MAT_IN_IN_LENGTH)*4


---------------------------------------------------------
IP prototype test(s):
Input and output vectors has been mapped into external DDR3 memory at the following addresses:
---------------------------------------------------------

Name			| Base address in Byte

pl_vec_in			 	| 0x02000000 <- 0
pl_mat_in			 	| 0x02000014 <- (PL_VEC_IN_IN_LENGTH)*4
pl_vec_out			 	| 0x02000078 <- (PL_VEC_IN_IN_LENGTH+PL_MAT_IN_IN_LENGTH)*4

NOTE: the external DDR memory is shared memory between the CPU embedded into the FPGA and the Algorithm implemented into the FPGA programmable logic (PL).


To send input vectors from the host (Matlab) to the FPGA call Matlab function "FPGAclientMATLAB" in "test_HIL.m" using the following parameters:

Input vector name		| Packet type 	|	Packet internal ID 	| Data to send	| Packet output size
pl_vec_in			 			| 3				| 0						| data vector	| 0
pl_mat_in			 			| 3				| 1						| data vector	| 0



To read output vectors from the FPGA to the host PC call Matlab function "FPGAclientMATLAB" in "test_HIL.m" using the following parameters:

Output vector name		| Packet type 	|	Packet internal ID 	| Data to send	| Packet output size
pl_vec_out			 			| 4				| 0						| 0				| 5
